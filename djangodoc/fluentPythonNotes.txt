study start from: 2018-12-10

current page: 423

python3 -m doctest example_script.py

collections.namedtuple   创建一个具名元组需要两个参数，一个是类名，另一个是类的各个字段的名字。后者可以是由数个字符串组成的可迭代对象，或者是由空格分隔开的字段名组成的字符串。

[start:stop:step]
slice(52, 55)
...

seq.sort(key=?)
sorted(seq, key=?)

bisect.bisect
bisect.insort

array.array
memoryview
memoryview.cast
collections.deque
queue: Queue, LifoQueue, PriorityQueue
multiprocessing: Queue, JoinableQueue
asyncio: Queue, LifoQueue, PriorityQueue, JoinableQueue
heapq: heappush, heappop

dictcomp:
{code: country.upper() for country, code in country_code.items() if code < 66}

dict.setdefault
collections.defaultdict(default_factory)
collections.OrderedDict
collections.ChainMap
collections.Counter
colllections.UserDict
types.MappingProxyType


set
frozenset

setcomps:
{chr(i) for i in range(32, 256) if 'SIGN' in name(chr(i),'')}


lambda
__call__
inspect
__annotations__
operator
operator.attrgetter, itemgetter, methodcaller
functools.partial, partialmethod

nonlocal
functools.wraps
functools.lru_cache(maxsize=128, typed=False)
functools.singledispatch

weakref.finalize
weakref.ref
WeakKeyDictionary, WeakValueDictionary, WeakSet, finalize

frozenset.copy()

变量保存的是引用，这一点对 Python 编程有很多实际的影响。
简单的赋值不创建副本。
对 += 或 *= 所做的增量赋值来说，如果左边的变量绑定的是不可变对象，会创建新对象；如果是可变对象，会就地修改。
为现有的变量赋予新值，不会修改之前绑定的变量。这叫重新绑定：现在变量绑定了其他对象。如果变量是之前那个对象的最后一个引用，对象会被当作垃圾回收。
函数的参数以别名的形式传递，这意味着，函数可能会修改通过参数传入的可变对象。这一行为无法避免，除非在本地创建副本，或者使用不可变对象（例如，传入元组，而不传入列表）。
使用可变类型作为函数参数的默认值有危险，因为如果就地修改了参数，默认值也就变了，这会影响以后使用默认值的调用。


classmethod
staticmethod

__slots__












